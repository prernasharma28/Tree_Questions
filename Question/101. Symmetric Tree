QUESTION : SYMMETRIC TREE 

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Example 1:
Input: root = [1,2,2,3,4,4,3]
Output: true

Example 2:
Input: root = [1,2,2,null,3,null,3]
Output: false

Constraints:
    The number of nodes in the tree is in the range [1, 1000].
    -100 <= Node.val <= 100


SOLUTION : 

class Solution {
public:
    bool preOrder(TreeNode* n1, TreeNode* n2) {
        if (n1 == NULL && n2 == NULL) {
            return true;
        }
        if (n1 == NULL || n2 == NULL) {
            return false;
        }
        if (n1->val != n2->val) {
            return false;
        }
        bool left = preOrder(n1->left, n2->right);
        bool right = preOrder(n1->right, n2->left);

        return (left && right);
    }
    bool isSymmetric(TreeNode* root) {
        if (root == NULL)
            return true;
        bool ans = preOrder(root->left, root->right);
        return ans;
    }
};

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

